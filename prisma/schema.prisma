generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Iglesia {
  idIglesia   Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(100)
  direccion   String    @db.VarChar(150)
  telefono    String    @db.VarChar(20)
  responsable String    @db.VarChar(100)
  cortes      Corte[]
  modulos     Modulo[]
  qrPagos     QrPago[]
  usuarios    Usuario[]
}

model Modulo {
  idModulo          Int        @id @default(autoincrement())
  nombreModulo      String     @db.VarChar(50)
  nombreResponsable String     @db.VarChar(50)
  usuario           String     @db.VarChar(70)
  password          String     @db.VarChar(70)
  token             String     @db.VarChar(80)
  imagenModulo      String?    @db.VarChar(70)
  idIglesia         Int
  iglesia           Iglesia    @relation(fields: [idIglesia], references: [idIglesia])
  productos         Producto[]
}

model Usuario {
  idUsuario         Int     @id @default(autoincrement())
  usuario           String  @unique(map: "usuario_unique") @db.VarChar(50)
  password          String  @db.VarChar(50)
  nombreResponsable String  @db.VarChar(100)
  token             String  @db.VarChar(80)
  rol               String  @db.VarChar(30)
  idIglesia         Int
  abonos            Abono[]
  iglesia           Iglesia @relation(fields: [idIglesia], references: [idIglesia])
}

model Producto {
  idProducto           Int                   @id @default(autoincrement())
  idModulo             Int
  nombreProducto       String                @db.VarChar(50)
  precio               Float
  urlImage             String?               @db.VarChar(100)
  complementoProductos ComplementoProducto[]
  compras              Compra[]
  modulo               Modulo                @relation(fields: [idModulo], references: [idModulo], onDelete: Cascade)
}

model QrPago {
  idQrPago        Int         @id @default(autoincrement())
  token           String      @db.VarChar(80)
  saldo           Float
  nombre          String      @db.VarChar(80)
  registrado      Boolean
  fechaCreacion   DateTime
  idIglesia       Int
  abonos          Abono[]
  pedidos         Pedido[]    @relation("QrPagoPedidos")
  iglesia         Iglesia     @relation(fields: [idIglesia], references: [idIglesia])
  traspasosEnvio  Transpaso[] @relation("TraspasoEnvio")
  traspasosRecibe Transpaso[] @relation("TraspasoRecibe")
}

model Corte {
  idCorte          Int      @id @default(autoincrement())
  fechaCorte       DateTime
  cantidad         Float
  nombreRecolector String   @db.VarChar(50)
  idIglesia        Int
  abonos           Abono[]
  iglesia          Iglesia  @relation(fields: [idIglesia], references: [idIglesia])
}

model Abono {
  idAbono    Int      @id @default(autoincrement())
  idQrPago   Int
  idUsuario  Int
  cantidad   Float
  fechaAbono DateTime
  idCorte    Int?
  corte      Corte?   @relation(fields: [idCorte], references: [idCorte])
  qrPago     QrPago   @relation(fields: [idQrPago], references: [idQrPago])
  usuario    Usuario  @relation(fields: [idUsuario], references: [idUsuario])
}

model Pedido {
  idPedido               Int                    @id @default(autoincrement())
  idQrPago               Int
  cantidadProductoTotal  Int
  valorTotal             Float
  entregado              Boolean
  fechaPedido            DateTime
  tipoPedido             String                 @db.VarChar(50)
  cancelado              Boolean
  compras                Compra[]
  qrPago                 QrPago                 @relation("QrPagoPedidos", fields: [idQrPago], references: [idQrPago])
  solicitudCancelaciones SolicitudCancelacion[]
}

model Compra {
  idCompra               Int                 @id @default(autoincrement())
  idPedido               Int
  idProducto             Int
  fechaCompra            DateTime
  nombreProductoOriginal String              @db.VarChar(50)
  precioOriginal         Float
  complementoCompras     ComplementoCompra[]
  pedido                 Pedido              @relation(fields: [idPedido], references: [idPedido])
  producto               Producto            @relation(fields: [idProducto], references: [idProducto])
}

model Transpaso {
  idTranspaso    Int      @id @default(autoincrement())
  fechaTranspaso DateTime
  idQrPagoEnvio  Int
  idQrPagoSalio  Int
  qrPagoEnvio    QrPago   @relation("TraspasoEnvio", fields: [idQrPagoEnvio], references: [idQrPago])
  qrPagoSalio    QrPago   @relation("TraspasoRecibe", fields: [idQrPagoSalio], references: [idQrPago])
}

model SolicitudCancelacion {
  idSolicitudCancelacion Int      @id @default(autoincrement())
  idPedido               Int
  fechaSolicitud         DateTime
  atendida               Boolean
  realizada              Boolean
  pedido                 Pedido   @relation(fields: [idPedido], references: [idPedido])
}

model Complemento {
  idComplemento        Int                   @id @default(autoincrement())
  nombreComplemento    String                @db.VarChar(50)
  complementoCompras   ComplementoCompra[]
  complementoProductos ComplementoProducto[]
}

model ComplementoProducto {
  idComplementoProducto Int         @id @default(autoincrement())
  idComplemento         Int
  idProducto            Int
  complemento           Complemento @relation(fields: [idComplemento], references: [idComplemento])
  producto              Producto    @relation(fields: [idProducto], references: [idProducto])
}

model ComplementoCompra {
  idComplementoCompra Int         @id @default(autoincrement())
  idComplemento       Int
  idCompra            Int
  complemento         Complemento @relation(fields: [idComplemento], references: [idComplemento])
  compra              Compra      @relation(fields: [idCompra], references: [idCompra])
}
